name: Build

on:
  push:
    branches:
      - '**'
  create:
    branches:
      - 'master'
    tags:
      - '**'

env:
    QT_VERSION: '6.5.1'
    QT_MODULES: 'qtmultimedia qtwebsockets qtimageformats'
    EM_VERSION: '3.1.25'

jobs:
  iOS:
    if: github.event_name == 'create'
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Import signing keys
      run: |
        security create-keychain -p password build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain

        base64 -D <<< "${{ secrets.CERT_APPLE_DISTRIBUTION }}" > Apple_Distribution_Z52EFCPL6D.p7b
        security import ./Apple_Distribution_Z52EFCPL6D.p7b -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_APPLE_DEVELOPMENT }}" > Apple_Development_N952V7G2F5.p7b
        security import ./Apple_Development_N952V7G2F5.p7b -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_IOS_DEVELOPMENT }}" > Ios_Development_N952V7G2F5.p7b
        security import ./Ios_Development_N952V7G2F5.p7b -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_IOS_DISTRIBUTION }}" > Ios_Distribution_N952V7G2F5.p7b
        security import ./Ios_Distribution_N952V7G2F5.p7b -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_APPLE_DISTRIBUTION_P12 }}" > Apple_Distribution_Z52EFCPL6D.p12
        security import ./Apple_Distribution_Z52EFCPL6D.p12 -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_APPLE_DEVELOPMENT_P12 }}" > Apple_Development_N952V7G2F5.p12
        security import ./Apple_Development_N952V7G2F5.p12 -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_IOS_DEVELOPMENT_P12 }}" > Ios_Development_N952V7G2F5.p12
        security import ./Ios_Development_N952V7G2F5.p12 -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_IOS_DISTRIBUTION_P12 }}" > Ios_Distribution_N952V7G2F5.p12
        security import ./Ios_Distribution_N952V7G2F5.p12 -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_DEVELOPER_ID_APPLICATION }}" > Developer_ID_Application_Z52EFCPL6D.p7b
        security import ./Developer_ID_Application_Z52EFCPL6D.p7b -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        # Unlock
        security unlock-keychain -p password ~/Library/Keychains/build.keychain
        security set-keychain-settings -lu
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k password ~/Library/Keychains/build.keychain

    - name: Import provisioning profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        base64 -D <<< "${{ secrets.IOS_PROVISIONING_PROFILE }}" > ~/Library/MobileDevice/Provisioning\ Profiles/Lith_Testflight.mobileprovision
        base64 -D <<< "${{ secrets.DEVELOPMENT_PROVISIONING_PROFILE }}" > ~/Library/MobileDevice/Provisioning\ Profiles/Lith_Development.mobileprovision
        base64 -D <<< "${{ secrets.MANUAL_PROVISIONING_PROFILE }}" > ~/Library/MobileDevice/Provisioning\ Profiles/5f6dbe73-4785-410f-97dd-1f5d24c359be.mobileprovision
        base64 -D <<< "${{ secrets.MANUAL_PROVISIONING_PROFILE_2 }}" > ~/Library/MobileDevice/Provisioning\ Profiles/924f12c6-0542-4827-8c84-cfd0f137e270.mobileprovision

    - name: Install Host Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        set-env: false
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        target: ios
        modules: ${{env.QT_MODULES}}
    - name: Patch Qt
      run: |
        pushd $Qt6_DIR
        patch -p1 < $GITHUB_WORKSPACE/dist/ios/qt-ios.patch
        popd
        echo -e "[Paths]\nPrefix=.." > $Qt6_DIR/bin/qt.conf
        sed -i .old 's/clang_64/macos/' $Qt6_DIR/bin/target_qt.conf
        sed -i .old 's/clang_64/macos/' $Qt6_DIR/bin/qmake
    - name: Build the iOS binary
      run: |
        export TAG_NAME=$(./dist/get-tag-name.sh)
        IMGUR_API_KEY=${{ secrets.IMGUR_API_KEY }} bash ./dist/ios/build.sh
    - name: Upload artifacts to GitHub
      if: github.event_name != 'create'
      uses: actions/upload-artifact@v2
      with:
        name: Lith.ipa
        path: build_ios/Lith.ipa
    - name: Upload to GitHub
      if: github.event_name == 'create'
      run: |
        export TAG_NAME=$(./dist/get-tag-name.sh)
        if [[ "$TAG_NAME" != "" ]]; then
            ./dist/upload-github-release-asset.sh github_api_token="${{ secrets.GITHUB_TOKEN }}" tag="$TAG_NAME" filename="build_ios/Lith.ipa" renameto="Lith-iOS-${TAG_NAME}.ipa"
        fi
    - name: Upload to Testflight
      if: github.event_name == 'create'
      run: |
        export TAG_NAME=$(./dist/get-tag-name.sh)
        if [[ "$TAG_NAME" != "" ]]; then
            xcrun altool --validate-app --file build_ios/Lith.ipa --type ios --username "${{ secrets.APPLEID_NAME }}" --password "${{ secrets.APPLEID_PASSWORD }}"
            xcrun altool --upload-app --file build_ios/Lith.ipa --type ios --username "${{ secrets.APPLEID_NAME }}" --password "${{ secrets.APPLEID_PASSWORD }}"
        fi

  Android:
    if: github.event_name == 'create'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1        
    - name: Install Host Qt
      uses: jurplel/install-qt-action@v3
      with:
        host: 'linux'
        version: ${{env.QT_VERSION}}
        set-env: false
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        host: 'linux'
        version: ${{env.QT_VERSION}}
        target: android
        arch: android_armv7
        modules: ${{env.QT_MODULES}}
    - name: Get OpenSSL
      run: |
        git clone https://github.com/KDAB/android_openssl.git --depth=1
    - name: Build the Android binary
      run: |
        export ANDROID_NDK_ROOT=/usr/local/lib/android/sdk/ndk/25.1.8937393
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        IMGUR_API_KEY=${{ secrets.IMGUR_API_KEY }} bash ./dist/android/build.sh
    - name: Upload artifacts to GitHub
      if: github.event_name != 'create'
      uses: actions/upload-artifact@v2
      with:
        name: android-build-debug.apk
        path: build_android/android-build//build/outputs/apk/debug/android-build-debug.apk
    - name: Upload to GitHub
      if: github.event_name == 'create'
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)        
        if [[ "$TAG_NAME" != "" ]]; then
            ./dist/upload-github-release-asset.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="$TAG_NAME" filename="build_android/android-build//build/outputs/apk/debug/android-build-debug.apk" renameto="Lith-android-${TAG_NAME}.apk"
        fi

  Webassembly:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        target: desktop
        arch: wasm_32
        modules: ${{env.QT_MODULES}}
    - name: Install Host Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        set-env: false
    - uses: mymindstorm/setup-emsdk@v11
      with:
        version: ${{env.EM_VERSION}}
    - name: Build the Emscripten binary
      run: |
        IMGUR_API_KEY=${{ secrets.IMGUR_API_KEY }} bash ./dist/wasm/build.sh

  Windows-MSVC:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install dependencies
      shell: bash
      run: |
        choco install openssl
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        modules: ${{env.QT_MODULES}}
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build the application
      shell: bash
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        eval $(./dist/win/make-vs2019-env.bat)
        mkdir build_win
        cd build_win
        $Qt6_DIR/bin/qmake.exe .. IMGUR_API_KEY=${{ secrets.IMGUR_API_KEY }} VERSION=$TAG_NAME
        nmake
    - name: Windeployqt + zip
      shell: bash
      run: |
        cd build_win/release
        rm *.cpp *.h *.obj
        $Qt6_DIR/bin/windeployqt.exe Lith.exe --verbose 2 --release --compiler-runtime --qmldir ../..
        cp /c/Program\ Files/OpenSSL-Win64/bin/*.dll .
        7z a ../../Lith.zip *
    - name: Upload artifacts to GitHub
      if: github.event_name != 'create'
      uses: actions/upload-artifact@v2
      with:
        name: Lith.zip
        path: Lith.zip
    - name: Upload to GitHub
      shell: bash
      if: github.event_name == 'create'
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        if [[ "$TAG_NAME" != "" ]]; then
            ./dist/upload-github-release-asset.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="$TAG_NAME" filename="Lith.zip" renameto="Lith-win64-${TAG_NAME}.zip"
        fi



  Linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install Make
      run: |
        sudo apt update
        sudo apt install make libxkbcommon-dev
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        modules: ${{env.QT_MODULES}}
    - name: Build the application
      run: |
        mkdir build
        cd build
        $Qt6_DIR/bin/qmake .. IMGUR_API_KEY=${{ secrets.IMGUR_API_KEY }} VERSION=$TAG_NAME
        make -j5


  Flatpak:
    runs-on: ubuntu-latest
    if: false
    container:
      image: docker.io/bilelmoussaoui/flatpak-github-actions
      options: --privileged
    steps:
    - uses: actions/checkout@v2
    - name: "Inject build variables"
      run: |
        sed -i "s/#IMGUR_API_KEY=/IMGUR_API_KEY=${{ secrets.IMGUR_API_KEY }}/" Lith.pro
    - uses: bilelmoussaoui/flatpak-github-actions@v2
      with:
        bundle: "app.Lith.Lith.flatpak"
        manifest-path: "dist/linux/flatpak/app.Lith.Lith.json"
    - name: Upload artifacts to GitHub
      if: github.event_name != 'create'
      uses: actions/upload-artifact@v2
      with:
        name: app.Lith.Lith.flatpak
        path: app.Lith.Lith.flatpak
    - name: Upload to GitHub
      if: github.event_name == 'create'
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        if [[ "$TAG_NAME" != "" ]]; then
            ./dist/upload-github-release-asset.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="$TAG_NAME" filename="app.Lith.Lith.flatpak" renameto="Lith-linux-${TAG_NAME}.flatpak"
        fi


  macOS:
    runs-on: macOS-latest
    steps:
    - name: Import signing keys
      run: |
        security create-keychain -p password build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain

        base64 -D <<< "${{ secrets.CERT_APPLE_DISTRIBUTION }}" > Apple_Distribution_Z52EFCPL6D.p7b
        security import ./Apple_Distribution_Z52EFCPL6D.p7b -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_APPLE_DEVELOPMENT }}" > Apple_Development_N952V7G2F5.p7b
        security import ./Apple_Development_N952V7G2F5.p7b -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_APPLE_DISTRIBUTION_P12 }}" > Apple_Distribution_Z52EFCPL6D.p12
        security import ./Apple_Distribution_Z52EFCPL6D.p12 -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_APPLE_DEVELOPMENT_P12 }}" > Apple_Development_N952V7G2F5.p12
        security import ./Apple_Development_N952V7G2F5.p12 -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        base64 -D <<< "${{ secrets.CERT_DEVELOPER_ID_APPLICATION }}" > Developer_ID_Application_Z52EFCPL6D.p7b
        security import ./Developer_ID_Application_Z52EFCPL6D.p7b -k ~/Library/Keychains/build.keychain -P heslo -T /usr/bin/codesign

        # Unlock
        security unlock-keychain -p password ~/Library/Keychains/build.keychain
        security set-keychain-settings -lu
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k password ~/Library/Keychains/build.keychain
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        modules: ${{env.QT_MODULES}}
    - name: Build the application
      run: |
        IMGUR_API_KEY=${{ secrets.IMGUR_API_KEY }} ./dist/macos/build.sh
    - name: Generate .dmg
      run: |
        $Qt6_DIR/bin/macdeployqt build_macos/Lith.app -qmldir=. -dmg -appstore-compliant -codesign=Z52EFCPL6D
    - name: Upload artifacts to GitHub
      if: github.event_name != 'create'
      uses: actions/upload-artifact@v2
      with:
        name: Lith.dmg
        path: build_macos/Lith.dmg
    - name: Upload to GitHub
      if: github.event_name == 'create'
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)        
        if [[ "$TAG_NAME" != "" ]]; then
            ./dist/upload-github-release-asset.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="$TAG_NAME" filename="build_macos/Lith.dmg" renameto="Lith-macOS-${TAG_NAME}.dmg"
        fi

